!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CircleFitByTaubin	.\matGeom\geom3d\fitCircle3d.m	/^function Par = CircleFitByTaubin(XY)$/;"	f
D	.\matGeom\polygons2d\intersectPolylines.m	/^function u = D(x,y)$/;"	f
D_unbnd2bnd	.\lib\LevenbergMarquardt.m	/^function    df=D_unbnd2bnd(Y,lb,ub)$/;"	f
InterX	.\matGeom\polygons2d\private\InterX.m	/^function P = InterX(L1,varargin)$/;"	f
LevenbergMarquardt	.\lib\LevenbergMarquardt.m	/^function [xCurrent,Resnorm,fval,exitflag,extra_arguments,output,lambda,Jx] =LevenbergMarquardt(obj,xGuess,lb,ub,opt)$/;"	f
addFace	.\matGeom\graphs\gcontour3d.m	/^function [nodes, edges, faces] = addFace(nodes, edges, faces, faceNodes)$/;"	f
addSquareFace	.\matGeom\graphs\addSquareFace.m	/^function [nodes, edges, faces] = addSquareFace(nodes, edges, faces, faceNodes)$/;"	f
adjacency_matrix	.\matGeom\meshes3d\splitMesh.m	/^function [A] = adjacency_matrix(E)$/;"	f
angle2Points	.\matGeom\geom2d\angle2Points.m	/^function theta = angle2Points(varargin)$/;"	f
angle3Points	.\matGeom\geom2d\angle3Points.m	/^function theta = angle3Points(varargin)$/;"	f
angleAbsDiff	.\matGeom\geom2d\angleAbsDiff.m	/^function dif = angleAbsDiff(angle1, angle2)$/;"	f
angleDiff	.\matGeom\geom2d\angleDiff.m	/^function dif = angleDiff(angle1, angle2)$/;"	f
anglePoints3d	.\matGeom\geom3d\anglePoints3d.m	/^function alpha = anglePoints3d(varargin)$/;"	f
angleSort	.\matGeom\geom2d\angleSort.m	/^function varargout = angleSort(pts, varargin)$/;"	f
angleSort3d	.\matGeom\geom3d\angleSort3d.m	/^function varargout = angleSort3d(pts, varargin)$/;"	f
angles2d	.\matGeom\geom2d\angles2d.m	/^function angles2d$/;"	f
angles3d	.\matGeom\geom3d\angles3d.m	/^function angles3d(varargin)$/;"	f
bisector	.\matGeom\geom2d\bisector.m	/^function ray = bisector(varargin)$/;"	f
bnd2unbnd	.\lib\LevenbergMarquardt.m	/^function    Y=bnd2unbnd(X,lb,ub)$/;"	f
boundaryGraph	.\matGeom\graphs\boundaryGraph.m	/^function varargout = boundaryGraph(img)$/;"	f
boundedCentroidalVoronoi2d	.\matGeom\graphs\boundedCentroidalVoronoi2d.m	/^function varargout = boundedCentroidalVoronoi2d(germs, box, varargin)$/;"	f
boundedVoronoi2d	.\matGeom\graphs\boundedVoronoi2d.m	/^function [nodes, edges, faces] = boundedVoronoi2d(box, germs)$/;"	f
boundingBox	.\matGeom\geom2d\boundingBox.m	/^function box = boundingBox(points)$/;"	f
boundingBox3d	.\matGeom\geom3d\boundingBox3d.m	/^function box = boundingBox3d(points)$/;"	f
box3dVolume	.\matGeom\geom3d\box3dVolume.m	/^function vol = box3dVolume(box)$/;"	f
boxToMesh	.\matGeom\meshes3d\boxToMesh.m	/^function varargout = boxToMesh(varargin)$/;"	f
boxToPolygon	.\matGeom\geom2d\boxToPolygon.m	/^function poly = boxToPolygon(box)$/;"	f
boxToRect	.\matGeom\geom2d\boxToRect.m	/^function rect = boxToRect(box)$/;"	f
boxes2d	.\matGeom\geom2d\boxes2d.m	/^function boxes2d(varargin)$/;"	f
boxes3d	.\matGeom\geom3d\boxes3d.m	/^function boxes3d(varargin)$/;"	f
calibration2Dto3D	.\calibration2Dto3D.m	/^function [R, T, K] = calibration2Dto3D(X, x)$/;"	f
cart2cyl	.\matGeom\geom3d\cart2cyl.m	/^function varargout = cart2cyl(varargin)$/;"	f
cart2geod	.\matGeom\polygons2d\cart2geod.m	/^function point = cart2geod(src, curve)$/;"	f
cart2sph2	.\matGeom\geom3d\cart2sph2.m	/^function varargout = cart2sph2(varargin)$/;"	f
cart2sph2d	.\matGeom\geom3d\cart2sph2d.m	/^function varargout = cart2sph2d(x, y, z)$/;"	f
cartesianLine	.\matGeom\geom2d\cartesianLine.m	/^function line = cartesianLine(varargin)$/;"	f
celltoPointsMatrix	.\celltoPointsMatrix.m	/^function mPxy = celltoPointsMatrix(contour)$/;"	f
centeredEdgeToEdge	.\matGeom\geom2d\centeredEdgeToEdge.m	/^function edge = centeredEdgeToEdge(cedge)$/;"	f
centroid	.\matGeom\geom2d\centroid.m	/^function center = centroid(varargin)$/;"	f
centroidalVoronoi2d	.\matGeom\graphs\centroidalVoronoi2d.m	/^function [germs, germPaths] = centroidalVoronoi2d(germs, poly, varargin)$/;"	f
centroidalVoronoi2d_MC	.\matGeom\graphs\centroidalVoronoi2d_MC.m	/^function [germs, germPaths] = centroidalVoronoi2d_MC(germs, poly, varargin)$/;"	f
chainPixels	.\matGeom\polynomialCurves2d\polynomialCurveSetFit.m	/^function points = chainPixels(img, varargin)$/;"	f
checkMeshAdjacentFaces	.\matGeom\meshes3d\checkMeshAdjacentFaces.m	/^function checkMeshAdjacentFaces(vertices, edges, faces)$/;"	f
circle3dOrigin	.\matGeom\geom3d\circle3dOrigin.m	/^function ori = circle3dOrigin(varargin)$/;"	f
circle3dPoint	.\matGeom\geom3d\circle3dPoint.m	/^function point = circle3dPoint(circle, pos)$/;"	f
circle3dPosition	.\matGeom\geom3d\circle3dPosition.m	/^function theta = circle3dPosition(point, circle)$/;"	f
circleArcAsCurve	.\matGeom\deprecated\geom2d\circleArcAsCurve.m	/^function varargout = circleArcAsCurve(arc, N)$/;"	f
circleArcToPolyline	.\matGeom\geom2d\circleArcToPolyline.m	/^function varargout = circleArcToPolyline(arc, N)$/;"	f
circleAsPolygon	.\matGeom\deprecated\geom2d\circleAsPolygon.m	/^function varargout = circleAsPolygon(circle, varargin)$/;"	f
circleToPolygon	.\matGeom\geom2d\circleToPolygon.m	/^function varargout = circleToPolygon(circle, varargin)$/;"	f
circles2d	.\matGeom\geom2d\circles2d.m	/^function circles2d(varargin)$/;"	f
circles3d	.\matGeom\geom3d\circles3d.m	/^function circles3d(varargin)$/;"	f
circumCenter	.\matGeom\geom2d\circumCenter.m	/^function varargout = circumCenter(a, b, c)$/;"	f
circumCircle	.\matGeom\geom2d\circumCircle.m	/^function varargout = circumCircle(varargin)$/;"	f
clipConvexPolygon3dHP	.\matGeom\geom3d\clipConvexPolygon3dHP.m	/^function poly2 = clipConvexPolygon3dHP(poly, plane)$/;"	f
clipConvexPolyhedronHP	.\matGeom\meshes3d\clipConvexPolyhedronHP.m	/^function [nodes2, faces2] = clipConvexPolyhedronHP(nodes, faces, plane)$/;"	f
clipEdge	.\matGeom\geom2d\clipEdge.m	/^function edge2 = clipEdge(edge, box)$/;"	f
clipEdge3d	.\matGeom\geom3d\clipEdge3d.m	/^function clipped = clipEdge3d(edge, box)$/;"	f
clipGraph	.\matGeom\graphs\clipGraph.m	/^function varargout = clipGraph(nodes, edges, varargin)$/;"	f
clipGraphPolygon	.\matGeom\graphs\clipGraphPolygon.m	/^function [nodes2, edges2] = clipGraphPolygon(nodes, edges, poly)$/;"	f
clipLine	.\matGeom\geom2d\clipLine.m	/^function edge = clipLine(line, box, varargin)$/;"	f
clipLine3d	.\matGeom\geom3d\clipLine3d.m	/^function edge = clipLine3d(line, box)$/;"	f
clipLineRect	.\matGeom\deprecated\geom2d\clipLineRect.m	/^function edge = clipLineRect(line, rect)$/;"	f
clipMesh2dPolygon	.\matGeom\graphs\clipMesh2dPolygon.m	/^function [nodes2, edges2, faces2] = clipMesh2dPolygon(nodes, edges, faces, poly)$/;"	f
clipMeshVertices	.\matGeom\meshes3d\clipMeshVertices.m	/^function varargout = clipMeshVertices(v, f, b, varargin)$/;"	f
clipPoints	.\matGeom\geom2d\clipPoints.m	/^function points = clipPoints(points, box)$/;"	f
clipPoints3d	.\matGeom\geom3d\clipPoints3d.m	/^function varargout = clipPoints3d(points, shape, varargin)$/;"	f
clipPolygon	.\matGeom\polygons2d\clipPolygon.m	/^function poly2 = clipPolygon(polygon, w)$/;"	f
clipPolygon3dHP	.\matGeom\geom3d\clipPolygon3dHP.m	/^function poly2 = clipPolygon3dHP(poly, plane)$/;"	f
clipPolygonHP	.\matGeom\polygons2d\clipPolygonHP.m	/^function poly2 = clipPolygonHP(poly, line)$/;"	f
clipRay	.\matGeom\geom2d\clipRay.m	/^function [edge, isInside] = clipRay(ray, bb)$/;"	f
composeTransforms3d	.\matGeom\geom3d\composeTransforms3d.m	/^function trans = composeTransforms3d(varargin)$/;"	f
computeMeshEdges	.\matGeom\deprecated\meshes3d\computeMeshEdges.m	/^function edges = computeMeshEdges(faces)$/;"	f
concatArguments	.\matGeom\graphs\drawGraph.m	/^function res = concatArguments(in1, in2)$/;"	f
concatenateMeshes	.\matGeom\meshes3d\concatenateMeshes.m	/^function varargout = concatenateMeshes(varargin)$/;"	f
conncomp	.\matGeom\meshes3d\splitMesh.m	/^function [S,C] = conncomp(G)$/;"	f
connected_components	.\matGeom\meshes3d\splitMesh.m	/^function C = connected_components(F)$/;"	f
contourMatrixToPolylines	.\matGeom\polygons2d\contourMatrixToPolylines.m	/^function polys = contourMatrixToPolylines(C)$/;"	f
convexHull	.\matGeom\polygons2d\convexHull.m	/^function [hull, inds] = convexHull(points, varargin)$/;"	f
convexification	.\matGeom\polygons2d\convexification.m	/^function co = convexification(varargin)$/;"	f
crackPattern	.\matGeom\geom2d\crackPattern.m	/^function edges = crackPattern(box, points, alpha, varargin)$/;"	f
crackPattern2	.\matGeom\geom2d\crackPattern2.m	/^function edges = crackPattern2(box, points, alpha, varargin)$/;"	f
createBasisTransform	.\matGeom\geom2d\createBasisTransform.m	/^function transfo = createBasisTransform(source, target)$/;"	f
createBasisTransform3d	.\matGeom\geom3d\createBasisTransform3d.m	/^function transfo = createBasisTransform3d(source, target)$/;"	f
createCircle	.\matGeom\geom2d\createCircle.m	/^function circle = createCircle(varargin)$/;"	f
createCube	.\matGeom\meshes3d\createCube.m	/^function varargout = createCube()$/;"	f
createCubeOctahedron	.\matGeom\meshes3d\createCubeOctahedron.m	/^function varargout = createCubeOctahedron()$/;"	f
createDirectedCircle	.\matGeom\geom2d\createDirectedCircle.m	/^function circle = createDirectedCircle(varargin)$/;"	f
createDodecahedron	.\matGeom\meshes3d\createDodecahedron.m	/^function varargout = createDodecahedron()$/;"	f
createDurerPolyhedron	.\matGeom\meshes3d\createDurerPolyhedron.m	/^function varargout = createDurerPolyhedron(varargin)$/;"	f
createEdge	.\matGeom\geom2d\createEdge.m	/^function edge = createEdge(varargin)$/;"	f
createEdge3d	.\matGeom\geom3d\createEdge3d.m	/^function edge = createEdge3d(varargin)$/;"	f
createEulerAnglesRotation	.\matGeom\deprecated\geom3d\createEulerAnglesRotation.m	/^function mat = createEulerAnglesRotation(phi, theta, psi)$/;"	f
createHomothecy	.\matGeom\geom2d\createHomothecy.m	/^function T = createHomothecy(point, ratio)$/;"	f
createIcosahedron	.\matGeom\meshes3d\createIcosahedron.m	/^function varargout = createIcosahedron()$/;"	f
createLine	.\matGeom\geom2d\createLine.m	/^function line = createLine(varargin)$/;"	f
createLine3d	.\matGeom\geom3d\createLine3d.m	/^function line = createLine3d(varargin)$/;"	f
createLineReflection	.\matGeom\geom2d\createLineReflection.m	/^function trans = createLineReflection(line)$/;"	f
createMedian	.\matGeom\deprecated\geom2d\createMedian.m	/^function line = createMedian(varargin)$/;"	f
createMengerSponge	.\matGeom\meshes3d\createMengerSponge.m	/^function varargout = createMengerSponge()$/;"	f
createOctahedron	.\matGeom\meshes3d\createOctahedron.m	/^function varargout = createOctahedron()$/;"	f
createPlane	.\matGeom\geom3d\createPlane.m	/^function plane = createPlane(varargin)$/;"	f
createRay	.\matGeom\geom2d\createRay.m	/^function ray = createRay(varargin)$/;"	f
createRhombododecahedron	.\matGeom\meshes3d\createRhombododecahedron.m	/^function varargout = createRhombododecahedron()$/;"	f
createRotation	.\matGeom\geom2d\createRotation.m	/^function trans = createRotation(varargin)$/;"	f
createRotation3dLineAngle	.\matGeom\geom3d\createRotation3dLineAngle.m	/^function mat = createRotation3dLineAngle(line, theta)$/;"	f
createRotation90	.\matGeom\geom2d\createRotation90.m	/^function mat = createRotation90(varargin)$/;"	f
createRotationOx	.\matGeom\geom3d\createRotationOx.m	/^function trans = createRotationOx(varargin)$/;"	f
createRotationOy	.\matGeom\geom3d\createRotationOy.m	/^function trans = createRotationOy(varargin)$/;"	f
createRotationOz	.\matGeom\geom3d\createRotationOz.m	/^function trans = createRotationOz(varargin)$/;"	f
createRotationVector3d	.\matGeom\geom3d\createRotationVector3d.m	/^function ROT = createRotationVector3d(A,B)$/;"	f
createRotationVectorPoint3d	.\matGeom\geom3d\createRotationVectorPoint3d.m	/^function TFM = createRotationVectorPoint3d(A,B,P)$/;"	f
createScaling	.\matGeom\geom2d\createScaling.m	/^function trans = createScaling(varargin)$/;"	f
createScaling3d	.\matGeom\geom3d\createScaling3d.m	/^function trans = createScaling3d(varargin)$/;"	f
createSoccerBall	.\matGeom\meshes3d\createSoccerBall.m	/^function varargout = createSoccerBall()$/;"	f
createSphere	.\matGeom\geom3d\createSphere.m	/^function sphere = createSphere(varargin)$/;"	f
createTetrahedron	.\matGeom\meshes3d\createTetrahedron.m	/^function varargout = createTetrahedron()$/;"	f
createTetrakaidecahedron	.\matGeom\meshes3d\createTetrakaidecahedron.m	/^function varargout = createTetrakaidecahedron()$/;"	f
createTranslation	.\matGeom\geom2d\createTranslation.m	/^function trans = createTranslation(varargin)$/;"	f
createTranslation3d	.\matGeom\geom3d\createTranslation3d.m	/^function trans = createTranslation3d(varargin)$/;"	f
createVector	.\matGeom\geom2d\createVector.m	/^function vect = createVector(p1, p2)$/;"	f
crossProduct3d	.\matGeom\geom3d\crossProduct3d.m	/^function c = crossProduct3d(a,b)$/;"	f
cubicBezierToPolyline	.\matGeom\geom2d\cubicBezierToPolyline.m	/^function varargout = cubicBezierToPolyline(points, varargin)$/;"	f
curvature	.\matGeom\polygons2d\curvature.m	/^function kappa = curvature(varargin)$/;"	f
curveCMoment	.\matGeom\polygons2d\curveCMoment.m	/^function m = curveCMoment(curve, p, q)$/;"	f
curveCSMoment	.\matGeom\polygons2d\curveCSMoment.m	/^function m = curveCSMoment(curve, p, q)$/;"	f
curveCentroid	.\matGeom\deprecated\polygons2d\curveCentroid.m	/^function center = curveCentroid(varargin)$/;"	f
curveLength	.\matGeom\deprecated\polygons2d\curveLength.m	/^function len = curveLength(varargin)$/;"	f
curveMoment	.\matGeom\polygons2d\curveMoment.m	/^function m = curveMoment(curve, p, q)$/;"	f
curveToMesh	.\matGeom\meshes3d\curveToMesh.m	/^function [vertices, faces] = curveToMesh(curve, varargin)$/;"	f
cutMeshByPlane	.\matGeom\meshes3d\cutMeshByPlane.m	/^function varargout = cutMeshByPlane(v, f, plane, varargin)$/;"	f
cvtIterate	.\matGeom\graphs\cvtIterate.m	/^function varargout = cvtIterate(germs, funcPtr, funcArgs, N)$/;"	f
cvtUpdate	.\matGeom\graphs\cvtUpdate.m	/^function varargout = cvtUpdate(germs, points)$/;"	f
cyl2cart	.\matGeom\geom3d\cyl2cart.m	/^function varargout = cyl2cart(varargin)$/;"	f
cylinderMesh	.\matGeom\meshes3d\cylinderMesh.m	/^function varargout = cylinderMesh(cyl, varargin)$/;"	f
cylinderSurfaceArea	.\matGeom\geom3d\cylinderSurfaceArea.m	/^function S = cylinderSurfaceArea(cyl)$/;"	f
deg2rad	.\matGeom\geom2d\deg2rad.m	/^function rad = deg2rad(deg)$/;"	f
delaunayGraph	.\matGeom\graphs\delaunayGraph.m	/^function [points, edges] = delaunayGraph(points, varargin)$/;"	f
densifyPolygon	.\matGeom\polygons2d\densifyPolygon.m	/^function poly2 = densifyPolygon(poly, N)$/;"	f
deriv	.\lib\jacobianlim.m	/^function [out,out_l,out_r,x_up,f_up,x_down,f_down]=deriv(func,f_0,x,h,order)$/;"	f
dihedralAngle	.\matGeom\geom3d\dihedralAngle.m	/^function theta = dihedralAngle(plane1, plane2)$/;"	f
distanceLines3d	.\matGeom\geom3d\distanceLines3d.m	/^function [d, pt1, pt2] = distanceLines3d(line1, line2)$/;"	f
distancePointEdge	.\matGeom\geom2d\distancePointEdge.m	/^function [dist, pos] = distancePointEdge(point, edge)$/;"	f
distancePointEdge3d	.\matGeom\geom3d\distancePointEdge3d.m	/^function [dist, t] = distancePointEdge3d(point, edge)$/;"	f
distancePointLine	.\matGeom\geom2d\distancePointLine.m	/^function [dist, pos] = distancePointLine(point, line)$/;"	f
distancePointLine3d	.\matGeom\geom3d\distancePointLine3d.m	/^function d = distancePointLine3d(point, line)$/;"	f
distancePointMesh	.\matGeom\meshes3d\distancePointMesh.m	/^function [dist, proj] = distancePointMesh(point, vertices, faces, varargin)$/;"	f
distancePointPlane	.\matGeom\geom3d\distancePointPlane.m	/^function d = distancePointPlane(point, plane)$/;"	f
distancePointPolygon	.\matGeom\polygons2d\distancePointPolygon.m	/^function minDist = distancePointPolygon(point, poly)$/;"	f
distancePointPolyline	.\matGeom\polygons2d\distancePointPolyline.m	/^function [minDist, pos] = distancePointPolyline(point, poly, varargin)$/;"	f
distancePointTriangle3d	.\matGeom\geom3d\distancePointTriangle3d.m	/^function [dist, proj] = distancePointTriangle3d(point, triangle)$/;"	f
distancePointTrimesh_vectorized	.\matGeom\meshes3d\distancePointMesh.m	/^function [dist, proj] = distancePointTrimesh_vectorized(point, vertices, faces)$/;"	f
distancePoints	.\matGeom\geom2d\distancePoints.m	/^function dist = distancePoints(p1, p2, varargin)$/;"	f
distancePoints3d	.\matGeom\geom3d\distancePoints3d.m	/^function dist = distancePoints3d(p1, p2, varargin)$/;"	f
distancePolygons	.\matGeom\polygons2d\distancePolygons.m	/^function dist = distancePolygons(poly1, poly2)$/;"	f
distancePolygonsNoCross	.\matGeom\polygons2d\distancePolygonsNoCross.m	/^function dist = distancePolygonsNoCross(poly1, poly2)$/;"	f
distancePolylines	.\matGeom\polygons2d\distancePolylines.m	/^function dist = distancePolylines(poly1, poly2)$/;"	f
drawArrow	.\matGeom\geom2d\drawArrow.m	/^function varargout = drawArrow(varargin)$/;"	f
drawAxis3d	.\matGeom\geom3d\drawAxis3d.m	/^function drawAxis3d(varargin)$/;"	f
drawAxisCube	.\matGeom\geom3d\drawAxisCube.m	/^function p = drawAxisCube(varargin)$/;"	f
drawBezierCurve	.\matGeom\geom2d\drawBezierCurve.m	/^function varargout = drawBezierCurve(points, varargin)$/;"	f
drawBox	.\matGeom\geom2d\drawBox.m	/^function varargout = drawBox(box, varargin)$/;"	f
drawBox3d	.\matGeom\geom3d\drawBox3d.m	/^function varargout = drawBox3d(box, varargin)$/;"	f
drawCenteredEdge	.\matGeom\geom2d\drawCenteredEdge.m	/^function varargout = drawCenteredEdge(varargin)$/;"	f
drawCircle	.\matGeom\geom2d\drawCircle.m	/^function varargout = drawCircle(varargin)$/;"	f
drawCircle3d	.\matGeom\geom3d\drawCircle3d.m	/^function varargout = drawCircle3d(varargin)$/;"	f
drawCircleArc	.\matGeom\geom2d\drawCircleArc.m	/^function varargout = drawCircleArc(varargin)$/;"	f
drawCircleArc3d	.\matGeom\geom3d\drawCircleArc3d.m	/^function varargout = drawCircleArc3d(arc, varargin)$/;"	f
drawCube	.\matGeom\geom3d\drawCube.m	/^function varargout = drawCube(cube, varargin)$/;"	f
drawCuboid	.\matGeom\geom3d\drawCuboid.m	/^function varargout = drawCuboid(cuboid, varargin)$/;"	f
drawCurve	.\matGeom\deprecated\polygons2d\drawCurve.m	/^function varargout = drawCurve(varargin)$/;"	f
drawCurve3d	.\matGeom\deprecated\geom3d\drawCurve3d.m	/^function varargout = drawCurve3d(varargin)$/;"	f
drawCylinder	.\matGeom\geom3d\drawCylinder.m	/^function varargout = drawCylinder(cyl, varargin)$/;"	f
drawDigraph	.\matGeom\graphs\drawDigraph.m	/^function varargout = drawDigraph(varargin)$/;"	f
drawDirectedEdges	.\matGeom\graphs\drawDirectedEdges.m	/^function varargout = drawDirectedEdges(p, e, varargin)$/;"	f
drawEdge	.\matGeom\geom2d\drawEdge.m	/^function varargout = drawEdge(varargin)$/;"	f
drawEdge3d	.\matGeom\geom3d\drawEdge3d.m	/^function varargout = drawEdge3d(varargin)$/;"	f
drawEdgeLabels	.\matGeom\graphs\drawEdgeLabels.m	/^function varargout = drawEdgeLabels(p, e, value)$/;"	f
drawEdge_2d	.\matGeom\geom2d\drawEdge.m	/^function h = drawEdge_2d(ax, edge, options)$/;"	f
drawEdge_3d	.\matGeom\geom2d\drawEdge.m	/^function h = drawEdge_3d(ax, edge, options)$/;"	f
drawEllipse	.\matGeom\geom2d\drawEllipse.m	/^function varargout = drawEllipse(varargin)$/;"	f
drawEllipse3d	.\matGeom\geom3d\drawEllipse3d.m	/^function varargout = drawEllipse3d(varargin)$/;"	f
drawEllipseArc	.\matGeom\geom2d\drawEllipseArc.m	/^function varargout = drawEllipseArc(varargin)$/;"	f
drawEllipseCylinder	.\matGeom\geom3d\drawEllipseCylinder.m	/^function varargout = drawEllipseCylinder(cyl, varargin)$/;"	f
drawEllipsoid	.\matGeom\geom3d\drawEllipsoid.m	/^function varargout = drawEllipsoid(elli, varargin)$/;"	f
drawFaceNormals	.\matGeom\meshes3d\drawFaceNormals.m	/^function varargout = drawFaceNormals(varargin)$/;"	f
drawGraph	.\matGeom\graphs\drawGraph.m	/^function varargout = drawGraph(varargin)$/;"	f
drawGraphEdges	.\matGeom\graphs\drawGraphEdges.m	/^function varargout = drawGraphEdges(varargin)$/;"	f
drawGraphFaces	.\matGeom\deprecated\graphs\drawGraphFaces.m	/^function varargout = drawGraphFaces(varargin)$/;"	f
drawGrid3d	.\matGeom\geom3d\drawGrid3d.m	/^function varargout = drawGrid3d(varargin)$/;"	f
drawLabels	.\matGeom\geom2d\drawLabels.m	/^function varargout = drawLabels(varargin)$/;"	f
drawLine	.\matGeom\geom2d\drawLine.m	/^function varargout = drawLine(lin, varargin)$/;"	f
drawLine3d	.\matGeom\geom3d\drawLine3d.m	/^function h = drawLine3d(lin, varargin)$/;"	f
drawMesh	.\matGeom\meshes3d\drawMesh.m	/^function varargout = drawMesh(vertices, faces, varargin)$/;"	f
drawNodeLabels	.\matGeom\graphs\drawNodeLabels.m	/^function varargout = drawNodeLabels(nodes, value, varargin)$/;"	f
drawOrientedBox	.\matGeom\geom2d\drawOrientedBox.m	/^function varargout = drawOrientedBox(box, varargin)$/;"	f
drawParabola	.\matGeom\geom2d\drawParabola.m	/^function varargout = drawParabola(varargin)$/;"	f
drawPartialPatch	.\matGeom\geom3d\drawPartialPatch.m	/^function drawPartialPatch(u, v, z, varargin)$/;"	f
drawPlane3d	.\matGeom\geom3d\drawPlane3d.m	/^function h = drawPlane3d(plane, varargin)$/;"	f
drawPlatform	.\matGeom\geom3d\drawPlatform.m	/^function  varargout = drawPlatform(plane, siz, varargin)$/;"	f
drawPoint	.\matGeom\geom2d\drawPoint.m	/^function h = drawPoint(varargin)$/;"	f
drawPoint3d	.\matGeom\geom3d\drawPoint3d.m	/^function h = drawPoint3d(varargin)$/;"	f
drawPolygon	.\matGeom\polygons2d\drawPolygon.m	/^function varargout = drawPolygon (px, varargin)$/;"	f
drawPolygon3d	.\matGeom\geom3d\drawPolygon3d.m	/^function varargout = drawPolygon3d(varargin)$/;"	f
drawPolyhedra	.\matGeom\deprecated\meshes3d\drawPolyhedra.m	/^function varargout = drawPolyhedra(varargin)$/;"	f
drawPolyhedron	.\matGeom\meshes3d\drawPolyhedron.m	/^function varargout = drawPolyhedron(nodes, faces, varargin)$/;"	f
drawPolyline	.\matGeom\polygons2d\drawPolyline.m	/^function varargout = drawPolyline(varargin)$/;"	f
drawPolyline3d	.\matGeom\geom3d\drawPolyline3d.m	/^function varargout = drawPolyline3d(varargin)$/;"	f
drawPolynomialCurve	.\matGeom\polynomialCurves2d\drawPolynomialCurve.m	/^function varargout = drawPolynomialCurve(tBounds, varargin)$/;"	f
drawRay	.\matGeom\geom2d\drawRay.m	/^function varargout = drawRay(ray, varargin)$/;"	f
drawRect	.\matGeom\geom2d\drawRect.m	/^function varargout = drawRect(rect, varargin)$/;"	f
drawRect2	.\matGeom\deprecated\geom2d\drawRect2.m	/^function varargout = drawRect2(varargin)$/;"	f
drawShape	.\matGeom\geom2d\drawShape.m	/^function varargout = drawShape(type, param, varargin)$/;"	f
drawSphere	.\matGeom\geom3d\drawSphere.m	/^function varargout = drawSphere(varargin)$/;"	f
drawSphericalEdge	.\matGeom\geom3d\drawSphericalEdge.m	/^function varargout = drawSphericalEdge(sphere, edge, varargin)$/;"	f
drawSphericalPolygon	.\matGeom\geom3d\drawSphericalPolygon.m	/^function varargout = drawSphericalPolygon(sphere, poly, varargin)$/;"	f
drawSphericalTriangle	.\matGeom\geom3d\drawSphericalTriangle.m	/^function varargout = drawSphericalTriangle(sphere, p1, p2, p3, varargin)$/;"	f
drawSquareMesh	.\matGeom\graphs\drawSquareMesh.m	/^function varargout = drawSquareMesh(nodes, edges, faces, varargin) %#ok<INUSL>$/;"	f
drawSurfPatch	.\matGeom\geom3d\drawSurfPatch.m	/^function drawSurfPatch(u, v, z, varargin)$/;"	f
drawTorus	.\matGeom\geom3d\drawTorus.m	/^function varargout = drawTorus(torus, varargin)$/;"	f
drawVector	.\matGeom\geom2d\drawVector.m	/^function varargout = drawVector(pos, vect, varargin)$/;"	f
drawVector3d	.\matGeom\geom3d\drawVector3d.m	/^function varargout = drawVector3d(pos, vect, varargin)$/;"	f
drawVertices	.\matGeom\polygons2d\drawVertices.m	/^function varargout = drawVertices(varargin)$/;"	f
edgeAngle	.\matGeom\geom2d\edgeAngle.m	/^function theta = edgeAngle(edge)$/;"	f
edgeLength	.\matGeom\geom2d\edgeLength.m	/^function len = edgeLength(varargin)$/;"	f
edgeLength3d	.\matGeom\geom3d\edgeLength3d.m	/^function len = edgeLength3d(edge, varargin)$/;"	f
edgePosition	.\matGeom\geom2d\edgePosition.m	/^function pos = edgePosition(point, edge)$/;"	f
edgeToLine	.\matGeom\geom2d\edgeToLine.m	/^function line = edgeToLine(edge)$/;"	f
edgeToLine3d	.\matGeom\geom3d\edgeToLine3d.m	/^function line = edgeToLine3d(edge)$/;"	f
edgeToPolyline	.\matGeom\geom2d\edgeToPolyline.m	/^function poly = edgeToPolyline(edge, N)$/;"	f
edges2d	.\matGeom\geom2d\edges2d.m	/^function edges2d(varargin)$/;"	f
edges3d	.\matGeom\geom3d\edges3d.m	/^function edges3d(varargin)$/;"	f
ellipseAsPolygon	.\matGeom\deprecated\geom2d\ellipseAsPolygon.m	/^function varargout = ellipseAsPolygon(ellipse, N)$/;"	f
ellipsePerimeter	.\matGeom\geom2d\ellipsePerimeter.m	/^function perim = ellipsePerimeter(ellipse, varargin)$/;"	f
ellipseToPolygon	.\matGeom\geom2d\ellipseToPolygon.m	/^function varargout = ellipseToPolygon(ellipse, N)$/;"	f
ellipses2d	.\matGeom\geom2d\ellipses2d.m	/^function ellipses2d(varargin)$/;"	f
ellipsoidMesh	.\matGeom\meshes3d\ellipsoidMesh.m	/^function varargout = ellipsoidMesh(elli, varargin)$/;"	f
ellipsoidSurfaceArea	.\matGeom\geom3d\ellipsoidSurfaceArea.m	/^function s = ellipsoidSurfaceArea(elli)$/;"	f
enclosingCircle	.\matGeom\geom2d\enclosingCircle.m	/^function circle = enclosingCircle(pts)$/;"	f
estimateCameraPMatrix	.\estimateCameraPMatrix.m	/^function M = estimateCameraPMatrix(imPoints2D,objectPoints3D)$/;"	f
estimateCameraProjectionMatrix	.\estimateCameraProjectionMatrix.m	/^function M = estimateCameraProjectionMatrix(imPoints2D,objectPoints3D)$/;"	f
estimate_KR_fromMT	.\estimate_KR_fromMT.m	/^function [K,R,t] = estimate_KR_fromMT(M)$/;"	f
estimate_KRt_fromM	.\estimate_KRt_fromM.m	/^function [K,R,t] = estimate_KRt_fromM(M)$/;"	f
estimatepoints2D	.\estimatepoints2D.m	/^function imPoints2D_estim = estimatepoints2D(objectPoints3D,K,R,t)$/;"	f
estimatepoints2DImg	.\estimatepoints2DImg.m	/^function imPoints2D_estim = estimatepoints2DImg(objectPoints3D,M)$/;"	f
euclideanMST	.\matGeom\graphs\euclideanMST.m	/^function varargout = euclideanMST(points)$/;"	f
eulerAnglesToRotation3d	.\matGeom\geom3d\eulerAnglesToRotation3d.m	/^function mat = eulerAnglesToRotation3d(phi, theta, psi, varargin)$/;"	f
eval_Jacobian	.\lib\LevenbergMarquardt.m	/^function    [J,h,E,func_evals_Jacobian]=eval_Jacobian(objx,yGuess,fval,option_Jacobian)$/;"	f
eval_PlotIterations	.\lib\LevenbergMarquardt.m	/^function    OtptFcnVl=eval_PlotIterations(xGuess,OtptFcnVl,state)$/;"	f
eval_fun	.\lib\LevenbergMarquardt.m	/^function    [fval,Resnorm,J,extra_arguments]=eval_fun(objy,yGuess,Jacobian_method,extra_arguments)$/;"	f
eval_outputfun	.\lib\LevenbergMarquardt.m	/^function    stop=eval_outputfun(OutputFcn,xGuess,optimValues,state)$/;"	f
expandPolygon	.\matGeom\polygons2d\expandPolygon.m	/^function loops = expandPolygon(poly, dist, varargin)$/;"	f
faceCentroids	.\matGeom\deprecated\meshes3d\faceCentroids.m	/^function centroids = faceCentroids(nodes, faces)$/;"	f
faceNormal	.\matGeom\deprecated\meshes3d\faceNormal.m	/^function normals = faceNormal(nodes, faces)$/;"	f
fillGraphFaces	.\matGeom\graphs\fillGraphFaces.m	/^function varargout = fillGraphFaces(varargin)$/;"	f
fillPolygon	.\matGeom\polygons2d\fillPolygon.m	/^function varargout = fillPolygon(varargin)$/;"	f
fillPolygon3d	.\matGeom\geom3d\fillPolygon3d.m	/^function varargout = fillPolygon3d(varargin)$/;"	f
fillSphericalPolygon	.\matGeom\geom3d\fillSphericalPolygon.m	/^function varargout = fillSphericalPolygon(sphere, poly, germ)$/;"	f
fillSphericalTriangle	.\matGeom\geom3d\fillSphericalTriangle.m	/^function varargout = fillSphericalTriangle(sphere, p1, p2, p3, varargin)$/;"	f
fillline	.\fillline.m	/^function [xx,yy]=fillline(startp,endp,pts)$/;"	f
findClosestPoint	.\matGeom\geom2d\findClosestPoint.m	/^function [index, minDist] = findClosestPoint(coord, points)$/;"	f
findPoint	.\matGeom\polygons2d\findPoint.m	/^function index = findPoint(coord, points, varargin)$/;"	f
fitAffineTransform2d	.\matGeom\geom2d\fitAffineTransform2d.m	/^function trans = fitAffineTransform2d(pts1, pts2)$/;"	f
fitCircle3d	.\matGeom\geom3d\fitCircle3d.m	/^function [fittedCircle, circleNormal] = fitCircle3d(pts)$/;"	f
fitEllipse3d	.\matGeom\geom3d\fitEllipse3d.m	/^function [fittedEllipse3d, TFM3D] = fitEllipse3d(points, varargin)$/;"	f
fitLine3d	.\matGeom\geom3d\fitLine3d.m	/^function line = fitLine3d(points)$/;"	f
fitPlane	.\matGeom\geom3d\fitPlane.m	/^function plane = fitPlane(points)$/;"	f
fitPolynomialTransform2d	.\matGeom\geom2d\fitPolynomialTransform2d.m	/^function coeffs = fitPolynomialTransform2d(pts, ptsRef, degree)$/;"	f
formatAngle	.\matGeom\deprecated\geom2d\formatAngle.m	/^function alpha = formatAngle(alpha)$/;"	f
formatMeshOutput	.\matGeom\meshes3d\private\formatMeshOutput.m	/^function res = formatMeshOutput(nbArgs, vertices, edges, faces)$/;"	f
funCurveLength	.\matGeom\polynomialCurves2d\polynomialCurvePosition.m	/^function res = funCurveLength(t0, t1, c1, c2, varargin)$/;"	f
gabrielGraph	.\matGeom\graphs\gabrielGraph.m	/^function varargout = gabrielGraph(pts)$/;"	f
gcontour2d	.\matGeom\graphs\gcontour2d.m	/^function [nodes, edges] = gcontour2d(img)$/;"	f
gcontour3d	.\matGeom\graphs\gcontour3d.m	/^function [nodes, edges, faces] = gcontour3d(img)$/;"	f
generatePointsInPoly	.\matGeom\graphs\centroidalVoronoi2d.m	/^function pts = generatePointsInPoly(nPts)$/;"	f
generatePointsInPoly	.\matGeom\graphs\centroidalVoronoi2d_MC.m	/^function pts = generatePointsInPoly(nPts)$/;"	f
generateQRandPointsInPoly	.\matGeom\graphs\centroidalVoronoi2d_MC.m	/^function pts = generateQRandPointsInPoly(nPts)$/;"	f
geod2cart	.\matGeom\polygons2d\geod2cart.m	/^function point = geod2cart(src, curve, normal)$/;"	f
getDist	.\getDist.m	/^function Pdist=getDist(x1,y1,x2,y2)$/;"	f
getNeighbourNodes	.\matGeom\deprecated\meshes3d\meshReduce.m	/^function nodes2 = getNeighbourNodes(node, edges)$/;"	f
getNeighbourNodes	.\matGeom\meshes3d\mergeCoplanarFaces.m	/^function nodes2 = getNeighbourNodes(node, edges)$/;"	f
grAdjacentEdges	.\matGeom\graphs\grAdjacentEdges.m	/^function neigh = grAdjacentEdges(edges, node)$/;"	f
grAdjacentNodes	.\matGeom\graphs\grAdjacentNodes.m	/^function nodes2 = grAdjacentNodes(edges, node)$/;"	f
grClose	.\matGeom\graphs\grClose.m	/^function varargout = grClose(varargin)$/;"	f
grDilate	.\matGeom\graphs\grDilate.m	/^function varargout = grDilate(varargin)$/;"	f
grEdgeLength	.\matGeom\deprecated\graphs\grEdgeLength.m	/^function lengths = grEdgeLength(nodes, edges, varargin)$/;"	f
grEdgeLengths	.\matGeom\graphs\grEdgeLengths.m	/^function lengths = grEdgeLengths(nodes, edges, varargin)$/;"	f
grErode	.\matGeom\graphs\grErode.m	/^function varargout = grErode(varargin)$/;"	f
grFaceToPolygon	.\matGeom\graphs\grFaceToPolygon.m	/^function pts2 = grFaceToPolygon(varargin)$/;"	f
grFindGeodesicPath	.\matGeom\graphs\grFindGeodesicPath.m	/^function path = grFindGeodesicPath(nodes, edges, ind0, ind1, edgeWeights)$/;"	f
grFindMaximalLengthPath	.\matGeom\graphs\grFindMaximalLengthPath.m	/^function path = grFindMaximalLengthPath(nodes, edges, edgeWeights)$/;"	f
grLabel	.\matGeom\deprecated\meshes3d\meshReduce.m	/^function labels = grLabel(nodes, edges)$/;"	f
grLabel	.\matGeom\graphs\grLabel.m	/^function labels = grLabel(nodes, edges)$/;"	f
grLabel	.\matGeom\meshes3d\mergeCoplanarFaces.m	/^function labels = grLabel(nodes, edges)$/;"	f
grMean	.\matGeom\graphs\grMean.m	/^function varargout = grMean(varargin)$/;"	f
grMedian	.\matGeom\graphs\grMedian.m	/^function varargout = grMedian(varargin)$/;"	f
grMergeMultipleEdges	.\matGeom\graphs\grMergeMultipleEdges.m	/^function varargout = grMergeMultipleEdges(nodes, edges)$/;"	f
grMergeMultipleNodes	.\matGeom\graphs\grMergeMultipleNodes.m	/^function varargout = grMergeMultipleNodes(varargin)$/;"	f
grMergeNodeClusters	.\matGeom\graphs\grMergeNodeClusters.m	/^function [nodes2, edges2] = grMergeNodeClusters(nodes, edges)$/;"	f
grMergeNodes	.\matGeom\graphs\grMergeNodes.m	/^function [nodes, edges] = grMergeNodes(nodes, edges, mnodes)$/;"	f
grMergeNodesMedian	.\matGeom\graphs\grMergeNodesMedian.m	/^function [nodes2, edges2] = grMergeNodesMedian(nodes, edges, mnodes)$/;"	f
grNeighborEdges	.\matGeom\deprecated\graphs\grNeighborEdges.m	/^function neigh = grNeighborEdges(edges, node)$/;"	f
grNeighborNodes	.\matGeom\deprecated\graphs\grNeighborNodes.m	/^function nodes2 = grNeighborNodes(edges, node)$/;"	f
grNodeDegree	.\matGeom\graphs\grNodeDegree.m	/^function [degree, node] = grNodeDegree(node, edges)$/;"	f
grNodeInnerDegree	.\matGeom\graphs\grNodeInnerDegree.m	/^function degree = grNodeInnerDegree(node, edges)$/;"	f
grNodeOuterDegree	.\matGeom\graphs\grNodeOuterDegree.m	/^function degree = grNodeOuterDegree(node, edges)$/;"	f
grOpen	.\matGeom\graphs\grOpen.m	/^function varargout = grOpen(varargin)$/;"	f
grOppositeNode	.\matGeom\graphs\grOppositeNode.m	/^function node2 = grOppositeNode(edges, node)$/;"	f
grPropagateDistance	.\matGeom\graphs\grPropagateDistance.m	/^function d = grPropagateDistance(v, e, v0, l)$/;"	f
grRemoveEdge	.\matGeom\graphs\grRemoveEdge.m	/^function [nodes, edges2] = grRemoveEdge(nodes, edges, edge)$/;"	f
grRemoveEdges	.\matGeom\graphs\grRemoveEdges.m	/^function [nodes2, edges2] = grRemoveEdges(nodes, edges, rmEdges)$/;"	f
grRemoveMultiplePoints	.\matGeom\graphs\grRemoveMultiplePoints.m	/^function varargout = grRemoveMultiplePoints(nodes, edges)$/;"	f
grRemoveNode	.\matGeom\graphs\grRemoveNode.m	/^function [nodes2, edges2] = grRemoveNode(nodes, edges, node)$/;"	f
grRemoveNodes	.\matGeom\graphs\grRemoveNodes.m	/^function [nodes2, edges2] = grRemoveNodes(nodes, edges, rmNodes)$/;"	f
grShortestPath	.\matGeom\graphs\grShortestPath.m	/^function [nodePath, edgePath] = grShortestPath(nodes, edges, ind0, ind1, edgeWeights)$/;"	f
grSimplifyBranches	.\matGeom\graphs\grSimplifyBranches.m	/^function varargout = grSimplifyBranches(nodes, edges)$/;"	f
grSimplifyBranches_old	.\matGeom\graphs\grSimplifyBranches_old.m	/^function varargout = grSimplifyBranches_old(nodes, edges)$/;"	f
grVertexEccentricity	.\matGeom\graphs\grVertexEccentricity.m	/^function g = grVertexEccentricity(v, e, l, inds)$/;"	f
graph2Contours	.\matGeom\deprecated\meshes3d\meshReduce.m	/^function curves = graph2Contours(nodes, edges)$/;"	f
graph2Contours	.\matGeom\graphs\graph2Contours.m	/^function varargout = graph2Contours(nodes, edges) %#ok<INUSL>$/;"	f
graph2Contours	.\matGeom\meshes3d\mergeCoplanarFaces.m	/^function curves = graph2Contours(nodes, edges) %#ok<INUSL>$/;"	f
graphCenter	.\matGeom\graphs\graphCenter.m	/^function center = graphCenter(v, e, l)$/;"	f
graphDiameter	.\matGeom\graphs\graphDiameter.m	/^function diam = graphDiameter(v, e, l)$/;"	f
graphPeripheralVertices	.\matGeom\graphs\graphPeripheralVertices.m	/^function inds = graphPeripheralVertices(v, e, l)$/;"	f
graphRadius	.\matGeom\graphs\graphRadius.m	/^function r = graphRadius(v, e, l)$/;"	f
gridmeshToQuadmesh	.\matGeom\deprecated\meshes3d\gridmeshToQuadmesh.m	/^function varargout = gridmeshToQuadmesh(x, y, varargin)$/;"	f
hausdorffDistance	.\matGeom\geom2d\hausdorffDistance.m	/^function [hd, ind1, ind2] = hausdorffDistance(pts1, pts2)$/;"	f
hexagonalGrid	.\matGeom\geom2d\hexagonalGrid.m	/^function varargout = hexagonalGrid(bounds, origin, size, varargin)$/;"	f
homothecy	.\matGeom\deprecated\geom2d\homothecy.m	/^function trans = homothecy(point, ratio)$/;"	f
hypot3	.\matGeom\geom3d\hypot3.m	/^function h = hypot3(dx, dy, dz)$/;"	f
imageGraph	.\matGeom\graphs\imageGraph.m	/^function varargout = imageGraph(img, varargin)$/;"	f
inCircle	.\matGeom\deprecated\geom2d\inCircle.m	/^function b = inCircle(point, circle)$/;"	f
ind2sub_tril	.\matGeom\geom2d\minDistancePoints.m	/^function [r, c] = ind2sub_tril (N, idx)$/;"	f
inertiaEllipse	.\matGeom\geom2d\inertiaEllipse.m	/^function ell = inertiaEllipse(points)$/;"	f
inertiaEllipsoid	.\matGeom\geom3d\inertiaEllipsoid.m	/^function ell = inertiaEllipsoid(points)$/;"	f
intersectBoxes	.\matGeom\geom2d\intersectBoxes.m	/^function box = intersectBoxes(box1, box2)$/;"	f
intersectBoxes3d	.\matGeom\geom3d\intersectBoxes3d.m	/^function box = intersectBoxes3d(box1, box2)$/;"	f
intersectCircles	.\matGeom\geom2d\intersectCircles.m	/^function points = intersectCircles(circle1, circle2)$/;"	f
intersectEdgePlane	.\matGeom\geom3d\intersectEdgePlane.m	/^function point = intersectEdgePlane(edge, plane, varargin)$/;"	f
intersectEdgePolygon	.\matGeom\polygons2d\intersectEdgePolygon.m	/^function [intersects, inds] = intersectEdgePolygon(edge, poly, varargin)$/;"	f
intersectEdges	.\matGeom\geom2d\intersectEdges.m	/^function point = intersectEdges(edge1, edge2, varargin)$/;"	f
intersectLineCircle	.\matGeom\geom2d\intersectLineCircle.m	/^function points = intersectLineCircle(line, circle)$/;"	f
intersectLineCylinder	.\matGeom\geom3d\intersectLineCylinder.m	/^function points = intersectLineCylinder(line, cylinder, varargin)$/;"	f
intersectLineEdge	.\matGeom\geom2d\intersectLineEdge.m	/^function point = intersectLineEdge(line, edge, varargin)$/;"	f
intersectLineMesh3d	.\matGeom\meshes3d\intersectLineMesh3d.m	/^function [points, pos, faceInds] = intersectLineMesh3d(line, vertices, faces, varargin)$/;"	f
intersectLinePlane	.\matGeom\geom3d\intersectLinePlane.m	/^function point = intersectLinePlane(line, plane, varargin)$/;"	f
intersectLinePolygon	.\matGeom\polygons2d\intersectLinePolygon.m	/^function [intersects, edgeIndices] = intersectLinePolygon(line, poly, varargin)$/;"	f
intersectLinePolygon3d	.\matGeom\geom3d\intersectLinePolygon3d.m	/^function [inter, inside]= intersectLinePolygon3d(line, poly)$/;"	f
intersectLinePolyline	.\matGeom\polygons2d\intersectLinePolyline.m	/^function [intersects, edgeIndices] = intersectLinePolyline(line, poly, varargin)$/;"	f
intersectLineSphere	.\matGeom\geom3d\intersectLineSphere.m	/^function points = intersectLineSphere(line, sphere, varargin)$/;"	f
intersectLineTriangle3d	.\matGeom\geom3d\intersectLineTriangle3d.m	/^function [point, pos, isInside] = intersectLineTriangle3d(line, triangle, varargin)$/;"	f
intersectLines	.\matGeom\geom2d\intersectLines.m	/^function point = intersectLines(line1, line2, varargin)$/;"	f
intersectPlaneLine	.\matGeom\deprecated\geom3d\intersectPlaneLine.m	/^function point = intersectPlaneLine(plane, line)$/;"	f
intersectPlaneMesh	.\matGeom\meshes3d\intersectPlaneMesh.m	/^function polys = intersectPlaneMesh(plane, v, f)$/;"	f
intersectPlaneSphere	.\matGeom\geom3d\intersectPlaneSphere.m	/^function circle = intersectPlaneSphere(plane, sphere)$/;"	f
intersectPlanes	.\matGeom\geom3d\intersectPlanes.m	/^function line = intersectPlanes(plane1, plane2, varargin)$/;"	f
intersectPolylines	.\matGeom\polygons2d\intersectPolylines.m	/^function pts = intersectPolylines(poly1, varargin)$/;"	f
intersectRayPolygon	.\matGeom\polygons2d\intersectRayPolygon.m	/^function [intersects, edgeIndices] = intersectRayPolygon(ray, poly, varargin)$/;"	f
intersectRayPolygon3d	.\matGeom\geom3d\intersectRayPolygon3d.m	/^function [inter, inside]= intersectRayPolygon3d(ray, poly)$/;"	f
intersectThreePlanes	.\matGeom\geom3d\intersectThreePlanes.m	/^function point = intersectThreePlanes(plane1, plane2, plane3)$/;"	f
invertLine	.\matGeom\deprecated\geom2d\invertLine.m	/^function line = invertLine(var)$/;"	f
isAxisHandle	.\matGeom\utils\isAxisHandle.m	/^function b = isAxisHandle(arg)$/;"	f
isBelowPlane	.\matGeom\geom3d\isBelowPlane.m	/^function below = isBelowPlane(point, varargin)$/;"	f
isCoplanar	.\matGeom\geom3d\isCoplanar.m	/^function copl = isCoplanar(x,y,z,tolerance)$/;"	f
isCounterClockwise	.\matGeom\geom2d\isCounterClockwise.m	/^function res = isCounterClockwise(p1, p2, p3, varargin)$/;"	f
isLeftOriented	.\matGeom\geom2d\isLeftOriented.m	/^function b = isLeftOriented(point, line)$/;"	f
isParallel	.\matGeom\geom2d\isParallel.m	/^function b = isParallel(v1, v2, varargin)$/;"	f
isParallel3d	.\matGeom\geom3d\isParallel3d.m	/^function b = isParallel3d(v1, v2, varargin)$/;"	f
isPerpendicular	.\matGeom\geom2d\isPerpendicular.m	/^function b = isPerpendicular(v1, v2, varargin)$/;"	f
isPerpendicular3d	.\matGeom\geom3d\isPerpendicular3d.m	/^function b = isPerpendicular3d(v1, v2, varargin)$/;"	f
isPlane	.\matGeom\geom3d\isPlane.m	/^function d = isPlane(plane)$/;"	f
isPointInCircle	.\matGeom\geom2d\isPointInCircle.m	/^function b = isPointInCircle(point, circle, varargin)$/;"	f
isPointInEllipse	.\matGeom\geom2d\isPointInEllipse.m	/^function b = isPointInEllipse(point, ellipse, varargin)$/;"	f
isPointInMesh	.\matGeom\meshes3d\isPointInMesh.m	/^function res = isPointInMesh(point, v, f, varargin)$/;"	f
isPointInPolygon	.\matGeom\polygons2d\isPointInPolygon.m	/^function b = isPointInPolygon(point, poly)$/;"	f
isPointInTriangle	.\matGeom\geom2d\isPointInTriangle.m	/^function b = isPointInTriangle(point, p1, p2, p3)$/;"	f
isPointOnCircle	.\matGeom\geom2d\isPointOnCircle.m	/^function b = isPointOnCircle(point, circle, varargin)$/;"	f
isPointOnEdge	.\matGeom\geom2d\isPointOnEdge.m	/^function b = isPointOnEdge(point, edge, varargin)$/;"	f
isPointOnLine	.\matGeom\geom2d\isPointOnLine.m	/^function b = isPointOnLine(point, line, varargin)$/;"	f
isPointOnLine3d	.\matGeom\geom3d\isPointOnLine3d.m	/^function b = isPointOnLine3d(point, line, varargin)$/;"	f
isPointOnPolyline	.\matGeom\polygons2d\isPointOnPolyline.m	/^function res = isPointOnPolyline(point, poly, varargin)$/;"	f
isPointOnRay	.\matGeom\geom2d\isPointOnRay.m	/^function b = isPointOnRay(point, ray, varargin)$/;"	f
isTransform3d	.\matGeom\geom3d\isTransform3d.m	/^function a = isTransform3d(trans, varargin)$/;"	f
jacobianext	.\lib\jacobianext.m	/^function [J,h,func_evals,E,S,D]=jacobianext(func,x,varargin)$/;"	f
jacobianlim	.\lib\jacobianlim.m	/^function  [J,h,func_evals,f_0,E,S,F,X]=jacobianlim(func,x,varargin)$/;"	f
jacobiansimple	.\lib\jacobiansimple.m	/^function [J,h,func_evals,f_0]=jacobiansimple(func,x,varargin)$/;"	f
knnGraph	.\matGeom\graphs\knnGraph.m	/^function edges = knnGraph(nodes, varargin)$/;"	f
lineAngle	.\matGeom\geom2d\lineAngle.m	/^function theta = lineAngle(varargin)$/;"	f
lineFit	.\matGeom\geom2d\lineFit.m	/^function line = lineFit(varargin)$/;"	f
linePosition	.\matGeom\geom2d\linePosition.m	/^function pos = linePosition(point, line, varargin)$/;"	f
linePosition3d	.\matGeom\geom3d\linePosition3d.m	/^function pos = linePosition3d(point, line)$/;"	f
lineSymmetry	.\matGeom\deprecated\geom2d\lineSymmetry.m	/^function trans = lineSymmetry(line)$/;"	f
lines2d	.\matGeom\geom2d\lines2d.m	/^function lines2d(varargin)$/;"	f
lines3d	.\matGeom\geom3d\lines3d.m	/^function lines3d(varargin)$/;"	f
localToGlobal3d	.\matGeom\geom3d\private\localToGlobal3d.m	/^function trans = localToGlobal3d(varargin)$/;"	f
localToGlobal3d	.\matGeom\meshes3d\private\localToGlobal3d.m	/^function trans = localToGlobal3d(varargin)$/;"	f
lsqsvd	.\lsqsvd.m	/^function x = lsqsvd(A, b)$/;"	f
medialAxisConvex	.\matGeom\polygons2d\medialAxisConvex.m	/^function [nodes, edges] = medialAxisConvex(points)$/;"	f
medianLine	.\matGeom\geom2d\medianLine.m	/^function line = medianLine(varargin)$/;"	f
medianPlane	.\matGeom\geom3d\medianPlane.m	/^function plane = medianPlane(p1, p2)$/;"	f
mergeBoxes	.\matGeom\geom2d\mergeBoxes.m	/^function box = mergeBoxes(box1, box2)$/;"	f
mergeBoxes3d	.\matGeom\geom3d\mergeBoxes3d.m	/^function box = mergeBoxes3d(box1, box2)$/;"	f
mergeClosePoints	.\matGeom\geom2d\mergeClosePoints.m	/^function points = mergeClosePoints(points, varargin)$/;"	f
mergeCoplanarFaces	.\matGeom\meshes3d\mergeCoplanarFaces.m	/^function varargout = mergeCoplanarFaces(nodes, varargin)$/;"	f
mergeGraphs	.\matGeom\graphs\mergeGraphs.m	/^function varargout = mergeGraphs(varargin)$/;"	f
meshAdjacencyMatrix	.\matGeom\meshes3d\meshAdjacencyMatrix.m	/^function adj = meshAdjacencyMatrix(faces, varargin)$/;"	f
meshDihedralAngles	.\matGeom\meshes3d\meshDihedralAngles.m	/^function alpha = meshDihedralAngles(vertices, edges, faces)$/;"	f
meshEdgeFaces	.\matGeom\meshes3d\meshEdgeFaces.m	/^function edgeFaces = meshEdgeFaces(vertices, edges, faces) %#ok<INUSL>$/;"	f
meshEdgeLength	.\matGeom\meshes3d\meshEdgeLength.m	/^function lengths = meshEdgeLength(vertices, edges, faces) %#ok<INUSD>$/;"	f
meshEdges	.\matGeom\meshes3d\meshEdges.m	/^function edges = meshEdges(faces, varargin)$/;"	f
meshEnergy	.\matGeom\graphs\meshEnergy.m	/^function energy = meshEnergy(vertices, faces)$/;"	f
meshFace	.\matGeom\meshes3d\meshFace.m	/^function face = meshFace(faces, index)$/;"	f
meshFaceAdjacency	.\matGeom\meshes3d\meshFaceAdjacency.m	/^function adjList = meshFaceAdjacency(vertices, edges, faces)$/;"	f
meshFaceAreas	.\matGeom\meshes3d\meshFaceAreas.m	/^function areas = meshFaceAreas(vertices, faces)$/;"	f
meshFaceCentroids	.\matGeom\meshes3d\meshFaceCentroids.m	/^function centroids = meshFaceCentroids(varargin)$/;"	f
meshFaceEdges	.\matGeom\meshes3d\meshFaceEdges.m	/^function FE = meshFaceEdges(vertices, edges, faces)$/;"	f
meshFaceNormals	.\matGeom\meshes3d\meshFaceNormals.m	/^function normals = meshFaceNormals(varargin)$/;"	f
meshFaceNumber	.\matGeom\meshes3d\meshFaceNumber.m	/^function nFaces = meshFaceNumber(varargin)$/;"	f
meshFacePolygons	.\matGeom\meshes3d\meshFacePolygons.m	/^function polys = meshFacePolygons(varargin)$/;"	f
meshReduce	.\matGeom\deprecated\meshes3d\meshReduce.m	/^function varargout = meshReduce(nodes, varargin)$/;"	f
meshSurfaceArea	.\matGeom\meshes3d\meshSurfaceArea.m	/^function area = meshSurfaceArea(vertices, edges, faces)$/;"	f
meshVertexNormals	.\matGeom\meshes3d\meshVertexNormals.m	/^function [normals, faceNormals] = meshVertexNormals(varargin)$/;"	f
meshVolume	.\matGeom\meshes3d\meshVolume.m	/^function vol = meshVolume(vertices, edges, faces)$/;"	f
midPoint	.\matGeom\geom2d\midPoint.m	/^function varargout = midPoint(varargin)$/;"	f
midPoint3d	.\matGeom\geom3d\midPoint3d.m	/^function varargout = midPoint3d(varargin)$/;"	f
minConvexHull	.\matGeom\meshes3d\minConvexHull.m	/^function newFaces = minConvexHull(points, varargin)$/;"	f
minDistance	.\matGeom\deprecated\geom2d\minDistance.m	/^function [dist, varargout] = minDistance(p, curve)$/;"	f
minDistancePoints	.\matGeom\geom2d\minDistancePoints.m	/^function varargout = minDistancePoints(p1, varargin)$/;"	f
minimumCaliperDiameter	.\matGeom\polygons2d\minimumCaliperDiameter.m	/^function [min_width, min_angle] = minimumCaliperDiameter(points)$/;"	f
motion	.\motion.m	/^function im = motion(A,B)$/;"	f
nested_contraction_obj	.\lib\nested_contraction_obj.m	/^function [fval_1,x2_new,fval_2]=nested_contraction_obj(x1,x2)$/;"	f
nndist	.\matGeom\geom2d\nndist.m	/^function [dists, neighInds] = nndist(points)$/;"	f
normalize	.\matGeom\geom2d\normalize.m	/^function vn = normalize(v)$/;"	f
normalize3d	.\matGeom\deprecated\geom3d\normalize3d.m	/^function vn = normalize3d(v)$/;"	f
normalizeAngle	.\matGeom\geom2d\normalizeAngle.m	/^function alpha = normalizeAngle(alpha, varargin)$/;"	f
normalizePlane	.\matGeom\geom3d\normalizePlane.m	/^function plane2 = normalizePlane(plane1)$/;"	f
normalizeVector	.\matGeom\geom2d\normalizeVector.m	/^function vn = normalizeVector(v)$/;"	f
normalizeVector3d	.\matGeom\geom3d\normalizeVector3d.m	/^function vn = normalizeVector3d(v)$/;"	f
oblateSurfaceArea	.\matGeom\geom3d\oblateSurfaceArea.m	/^function S = oblateSurfaceArea(elli, varargin)$/;"	f
onCircle	.\matGeom\deprecated\geom2d\onCircle.m	/^function b = onCircle(point, circle)$/;"	f
onEdge	.\matGeom\deprecated\geom2d\onEdge.m	/^function b = onEdge(point, edge)$/;"	f
onLine	.\matGeom\deprecated\geom2d\onLine.m	/^function b = onLine(point, line)$/;"	f
onRay	.\matGeom\deprecated\geom2d\onRay.m	/^function b = onRay(point, ray)$/;"	f
orientedBox	.\matGeom\geom2d\orientedBox.m	/^function obox = orientedBox(points)$/;"	f
orientedBox3d	.\matGeom\geom3d\orientedBox3d.m	/^function box3d = orientedBox3d(pts)$/;"	f
orientedBoxToPolygon	.\matGeom\geom2d\orientedBoxToPolygon.m	/^function [tx, ty] = orientedBoxToPolygon(obox)$/;"	f
orthogonalLine	.\matGeom\geom2d\orthogonalLine.m	/^function res = orthogonalLine(line, point)$/;"	f
p_poly_dist	.\p_poly_dist.m	/^function [d_min, varargout] = p_poly_dist(xp, yp, xv, yv, varargin)$/;"	f
p_poly_dist1	.\p_poly_dist1.m	/^function d = p_poly_dist1(x, y, xv, yv) $/;"	f
parallelEdge	.\matGeom\geom2d\parallelEdge.m	/^function res = parallelEdge(edge, dist)$/;"	f
parallelLine	.\matGeom\geom2d\parallelLine.m	/^function res = parallelLine(line, point)$/;"	f
parallelLine3d	.\matGeom\geom3d\parallelLine3d.m	/^function res = parallelLine3d(line, point)$/;"	f
parallelPlane	.\matGeom\geom3d\parallelPlane.m	/^function res = parallelPlane(plane, point)$/;"	f
parametrize	.\matGeom\polygons2d\parametrize.m	/^function par = parametrize(varargin)$/;"	f
parseDrawInput	.\matGeom\geom3d\private\parseDrawInput.m	/^function [hAx, prim, varargin]=parseDrawInput(prim,valFun,type,defOpts,varargin)$/;"	f
parseInputArguments	.\matGeom\geom2d\drawEdge.m	/^function [ax, edge, options] = parseInputArguments(varargin)$/;"	f
parseMeshData	.\matGeom\meshes3d\private\parseMeshData.m	/^function varargout = parseMeshData(varargin)$/;"	f
parseScalingFactors	.\matGeom\geom3d\createScaling3d.m	/^function [sx, sy, sz] = parseScalingFactors(var)$/;"	f
parseThreePoints	.\matGeom\geom2d\private\parseThreePoints.m	/^function [a b c] = parseThreePoints(varargin)$/;"	f
patchGraph	.\matGeom\graphs\patchGraph.m	/^function varargout = patchGraph(nodes, edges, faces) %#ok<INUSL>$/;"	f
planeNormal	.\matGeom\geom3d\planeNormal.m	/^function n = planeNormal(plane)$/;"	f
planePoint	.\matGeom\geom3d\planePoint.m	/^function coord = planePoint(plane, point)$/;"	f
planePosition	.\matGeom\geom3d\planePosition.m	/^function pos = planePosition(point, plane)$/;"	f
planes3d	.\matGeom\geom3d\planes3d.m	/^function planes3d(varargin)$/;"	f
planesBisector	.\matGeom\geom3d\planesBisector.m	/^function out = planesBisector(plane1, plane2)$/;"	f
point3dBounds	.\matGeom\deprecated\geom3d\point3dBounds.m	/^function box = point3dBounds(points)$/;"	f
pointOnLine	.\matGeom\geom2d\pointOnLine.m	/^function point = pointOnLine(line, pos)$/;"	f
pointSetsAverage	.\matGeom\polygons2d\pointSetsAverage.m	/^function average = pointSetsAverage(pointSets, varargin)$/;"	f
point_to_line_distance	.\point_to_line_distance.m	/^function distance=point_to_line_distance(pt, v1, v2)$/;"	f
points2d	.\matGeom\geom2d\points2d.m	/^function points2d$/;"	f
points3d	.\matGeom\geom3d\points3d.m	/^function points3d(varargin)$/;"	f
polarPoint	.\matGeom\geom2d\polarPoint.m	/^function point = polarPoint(varargin)$/;"	f
polyArea3d	.\matGeom\meshes3d\meshSurfaceArea.m	/^function a = polyArea3d(v, normal)$/;"	f
polyfit2	.\matGeom\polynomialCurves2d\polyfit2.m	/^function coef = polyfit2(varargin)$/;"	f
polygon3dNormalAngle	.\matGeom\geom3d\polygon3dNormalAngle.m	/^function theta = polygon3dNormalAngle(points, ind)$/;"	f
polygonArea	.\matGeom\polygons2d\polygonArea.m	/^function area = polygonArea(poly, varargin)$/;"	f
polygonArea3d	.\matGeom\geom3d\polygonArea3d.m	/^function area = polygonArea3d(poly, varargin)$/;"	f
polygonBounds	.\matGeom\polygons2d\polygonBounds.m	/^function box = polygonBounds(polygon)$/;"	f
polygonCentroid	.\matGeom\geom3d\private\polygonCentroid.m	/^function [centroid, area] = polygonCentroid(varargin)$/;"	f
polygonCentroid	.\matGeom\polygons2d\polygonCentroid.m	/^function [centroid, area] = polygonCentroid(varargin)$/;"	f
polygonCentroid3d	.\matGeom\geom3d\polygonCentroid3d.m	/^function centroid = polygonCentroid3d(varargin)$/;"	f
polygonContains	.\matGeom\polygons2d\polygonContains.m	/^function varargout = polygonContains(poly, point)$/;"	f
polygonCurvature	.\matGeom\polygons2d\polygonCurvature.m	/^function curv = polygonCurvature(poly, M)$/;"	f
polygonEdges	.\matGeom\polygons2d\polygonEdges.m	/^function edges = polygonEdges(poly)$/;"	f
polygonExpand	.\matGeom\deprecated\polygons2d\polygonExpand.m	/^function poly2 = polygonExpand(polygon, dist)$/;"	f
polygonInertiaEllipse	.\matGeom\polygons2d\polygonInertiaEllipse.m	/^function elli = polygonInertiaEllipse(poly)$/;"	f
polygonLength	.\matGeom\polygons2d\polygonLength.m	/^function len = polygonLength(poly, varargin)$/;"	f
polygonLoops	.\matGeom\polygons2d\polygonLoops.m	/^function loops = polygonLoops(poly, varargin)$/;"	f
polygonNormalAngle	.\matGeom\polygons2d\polygonNormalAngle.m	/^function theta = polygonNormalAngle(points, ind)$/;"	f
polygonOuterNormal	.\matGeom\polygons2d\polygonOuterNormal.m	/^function vect = polygonOuterNormal(poly, iVertex)$/;"	f
polygonPoint	.\matGeom\polygons2d\polygonPoint.m	/^function point = polygonPoint(poly, pos)$/;"	f
polygonSecondAreaMoments	.\matGeom\polygons2d\polygonSecondAreaMoments.m	/^function [Ixx, Iyy, Ixy] = polygonSecondAreaMoments(poly)$/;"	f
polygonSelfIntersections	.\matGeom\polygons2d\polygonSelfIntersections.m	/^function varargout = polygonSelfIntersections(poly, varargin)$/;"	f
polygonSignature	.\matGeom\polygons2d\polygonSignature.m	/^function [res, thetaList] = polygonSignature(poly, varargin)$/;"	f
polygonSubcurve	.\matGeom\polygons2d\polygonSubcurve.m	/^function res = polygonSubcurve(poly, t0, t1)$/;"	f
polygonSymmetryAxis	.\matGeom\polygons2d\polygonSymmetryAxis.m	/^function axis = polygonSymmetryAxis(poly)$/;"	f
polygonToRow	.\matGeom\polygons2d\polygonToRow.m	/^function row = polygonToRow(polygon, varargin)$/;"	f
polygonVertices	.\matGeom\polygons2d\polygonVertices.m	/^function vertices = polygonVertices(poly)$/;"	f
polygons3d	.\matGeom\geom3d\polygons3d.m	/^function polygons3d(varargin)$/;"	f
polyhedra	.\matGeom\meshes3d\polyhedra.m	/^function polyhedra(varargin)$/;"	f
polyhedronCentroid	.\matGeom\meshes3d\polyhedronCentroid.m	/^function centroid = polyhedronCentroid(vertices, faces) %#ok<INUSD>$/;"	f
polyhedronMeanBreadth	.\matGeom\meshes3d\polyhedronMeanBreadth.m	/^function breadth = polyhedronMeanBreadth(vertices, edges, faces)$/;"	f
polyhedronNormalAngle	.\matGeom\meshes3d\polyhedronNormalAngle.m	/^function theta = polyhedronNormalAngle(varargin)$/;"	f
polyhedronSlice	.\matGeom\meshes3d\polyhedronSlice.m	/^function points = polyhedronSlice(nodes, faces, plane)$/;"	f
polylineCentroid	.\matGeom\polygons2d\polylineCentroid.m	/^function center = polylineCentroid(varargin)$/;"	f
polylineLength	.\matGeom\polygons2d\polylineLength.m	/^function len = polylineLength(poly, varargin)$/;"	f
polylinePoint	.\matGeom\polygons2d\polylinePoint.m	/^function point = polylinePoint(poly, pos)$/;"	f
polylineSelfIntersections	.\matGeom\polygons2d\polylineSelfIntersections.m	/^function varargout = polylineSelfIntersections(poly, varargin)$/;"	f
polylineSubcurve	.\matGeom\polygons2d\polylineSubcurve.m	/^function res = polylineSubcurve(poly, t0, t1)$/;"	f
polynomialCurveCentroid	.\matGeom\polynomialCurves2d\polynomialCurveCentroid.m	/^function centroid = polynomialCurveCentroid(tBounds, varargin)$/;"	f
polynomialCurveCurvature	.\matGeom\polynomialCurves2d\polynomialCurveCurvature.m	/^function kappa = polynomialCurveCurvature(t, varargin)$/;"	f
polynomialCurveCurvatures	.\matGeom\polynomialCurves2d\polynomialCurveCurvatures.m	/^function varargout = polynomialCurveCurvatures(t, varargin)$/;"	f
polynomialCurveDerivative	.\matGeom\polynomialCurves2d\polynomialCurveDerivative.m	/^function v = polynomialCurveDerivative(t, varargin)$/;"	f
polynomialCurveFit	.\matGeom\polynomialCurves2d\polynomialCurveFit.m	/^function varargout = polynomialCurveFit(t, varargin)$/;"	f
polynomialCurveLength	.\matGeom\polynomialCurves2d\polynomialCurveLength.m	/^function L = polynomialCurveLength(tBounds, varargin)$/;"	f
polynomialCurveNormal	.\matGeom\polynomialCurves2d\polynomialCurveNormal.m	/^function v = polynomialCurveNormal(t, varargin)$/;"	f
polynomialCurvePoint	.\matGeom\polynomialCurves2d\polynomialCurvePoint.m	/^function point = polynomialCurvePoint(t, varargin)$/;"	f
polynomialCurvePosition	.\matGeom\polynomialCurves2d\polynomialCurvePosition.m	/^function pos = polynomialCurvePosition(tBounds, varargin)$/;"	f
polynomialCurveProjection	.\matGeom\polynomialCurves2d\polynomialCurveProjection.m	/^function pos = polynomialCurveProjection(tBounds, varargin)$/;"	f
polynomialCurveSetFit	.\matGeom\polynomialCurves2d\polynomialCurveSetFit.m	/^function varargout = polynomialCurveSetFit(seg, varargin)$/;"	f
polynomialDerivate	.\matGeom\polynomialCurves2d\polynomialDerivate.m	/^function deriv = polynomialDerivate(poly)$/;"	f
polynomialTransform2d	.\matGeom\geom2d\polynomialTransform2d.m	/^function res = polynomialTransform2d(pts, coeffs)$/;"	f
prim_mst	.\matGeom\graphs\prim_mst.m	/^function varargout = prim_mst(edges, vals)$/;"	f
progressbar	.\matGeom\meshes3d\private\progressbar.m	/^function progressbar(n,N,w)$/;"	f
projLineOnPlane	.\matGeom\geom3d\projLineOnPlane.m	/^function [newLine, isOrthogonal] = projLineOnPlane(line, plane)$/;"	f
projPointOnLine	.\matGeom\geom2d\projPointOnLine.m	/^function point = projPointOnLine(point, line)$/;"	f
projPointOnLine3d	.\matGeom\geom3d\projPointOnLine3d.m	/^function point = projPointOnLine3d(point, line)$/;"	f
projPointOnPlane	.\matGeom\geom3d\projPointOnPlane.m	/^function point = projPointOnPlane(point, plane)$/;"	f
projPointOnPolygon	.\matGeom\polygons2d\projPointOnPolygon.m	/^function varargout = projPointOnPolygon(point, poly, varargin)$/;"	f
projPointOnPolyline	.\matGeom\polygons2d\projPointOnPolyline.m	/^function varargout = projPointOnPolyline(point, poly, varargin)$/;"	f
prolateSurfaceArea	.\matGeom\geom3d\prolateSurfaceArea.m	/^function S = prolateSurfaceArea(elli, varargin)$/;"	f
pruneGraph	.\matGeom\graphs\pruneGraph.m	/^function [nodes2, edges2] = pruneGraph(nodes, edges)$/;"	f
quiverToGraph	.\matGeom\graphs\quiverToGraph.m	/^function [v, e] = quiverToGraph(x, y, dx, dy)$/;"	f
rad2deg	.\matGeom\geom2d\rad2deg.m	/^function deg = rad2deg(rad)$/;"	f
radicalAxis	.\matGeom\geom2d\radicalAxis.m	/^function line = radicalAxis(circle1, circle2)$/;"	f
randomAngle3d	.\matGeom\geom3d\randomAngle3d.m	/^function varargout = randomAngle3d(varargin)$/;"	f
randomPointInBox	.\matGeom\geom2d\randomPointInBox.m	/^function points = randomPointInBox(box, N, varargin)$/;"	f
randomPointInBox3d	.\matGeom\geom3d\randomPointInBox3d.m	/^function points = randomPointInBox3d(box, N, varargin)$/;"	f
randomPointInPolygon	.\matGeom\polygons2d\randomPointInPolygon.m	/^function points = randomPointInPolygon(poly, varargin)$/;"	f
rays2d	.\matGeom\geom2d\rays2d.m	/^function rays2d(varargin)$/;"	f
readGraph	.\matGeom\graphs\readGraph.m	/^function [nodes, edges] = readGraph(fileName)$/;"	f
readMesh_off	.\matGeom\meshes3d\readMesh_off.m	/^function varargout = readMesh_off(fileName)$/;"	f
readMesh_ply	.\matGeom\meshes3d\readMesh_ply.m	/^function varargout = readMesh_ply(fileName)$/;"	f
readPolygonSet	.\matGeom\polygons2d\readPolygonSet.m	/^function polys = readPolygonSet(filename)$/;"	f
recenterTransform3d	.\matGeom\geom3d\recenterTransform3d.m	/^function res = recenterTransform3d(transfo, center)$/;"	f
rectAsPolygon	.\matGeom\deprecated\polygons2d\rectAsPolygon.m	/^function [tx, ty] = rectAsPolygon(rect)$/;"	f
rectToBox	.\matGeom\geom2d\rectToBox.m	/^function box = rectToBox(rect)$/;"	f
rectToPolygon	.\matGeom\geom2d\rectToPolygon.m	/^function [tx, ty] = rectToPolygon(rect)$/;"	f
recurseCircle	.\matGeom\geom2d\enclosingCircle.m	/^function circ = recurseCircle(n, p, m, b)$/;"	f
registerICP	.\matGeom\geom2d\registerICP.m	/^function [trans, points] = registerICP(points, target, varargin)$/;"	f
relativeNeighborhoodGraph	.\matGeom\graphs\relativeNeighborhoodGraph.m	/^function [gnodes, gedges] = relativeNeighborhoodGraph(points)$/;"	f
removeMeshFaces	.\matGeom\meshes3d\removeMeshFaces.m	/^function varargout = removeMeshFaces(v, f, fI)$/;"	f
removeMeshVertices	.\matGeom\meshes3d\removeMeshVertices.m	/^function varargout = removeMeshVertices(vertices, faces, indsToRemove)$/;"	f
removeMultipleVertices	.\matGeom\polygons2d\removeMultipleVertices.m	/^function poly = removeMultipleVertices(poly, varargin)$/;"	f
resamplePolygon	.\matGeom\polygons2d\resamplePolygon.m	/^function poly2 = resamplePolygon(poly, n)$/;"	f
resamplePolygonByLength	.\matGeom\polygons2d\resamplePolygonByLength.m	/^function poly2 = resamplePolygonByLength(poly, step)$/;"	f
resamplePolyline	.\matGeom\polygons2d\resamplePolyline.m	/^function poly2 = resamplePolyline(poly, n)$/;"	f
resamplePolylineByLength	.\matGeom\polygons2d\resamplePolylineByLength.m	/^function poly2 = resamplePolylineByLength(poly, step)$/;"	f
reverseEdge	.\matGeom\geom2d\reverseEdge.m	/^function res = reverseEdge(edge)$/;"	f
reverseLine	.\matGeom\geom2d\reverseLine.m	/^function line = reverseLine(line)$/;"	f
reverseLine3d	.\matGeom\geom3d\reverseLine3d.m	/^function line = reverseLine3d(line)$/;"	f
reversePlane	.\matGeom\geom3d\reversePlane.m	/^function plane = reversePlane(plane)$/;"	f
reversePolygon	.\matGeom\polygons2d\reversePolygon.m	/^function rev = reversePolygon(poly)$/;"	f
reversePolyline	.\matGeom\polygons2d\reversePolyline.m	/^function rev = reversePolyline(poly)$/;"	f
revolutionSurface	.\matGeom\geom3d\revolutionSurface.m	/^function varargout = revolutionSurface(varargin)$/;"	f
rotateVector	.\matGeom\geom2d\rotateVector.m	/^function vr = rotateVector(v, angle)$/;"	f
rotation	.\matGeom\deprecated\geom2d\rotation.m	/^function trans = rotation(varargin)$/;"	f
rotation3dAxisAndAngle	.\matGeom\geom3d\rotation3dAxisAndAngle.m	/^function [axis, theta] = rotation3dAxisAndAngle(mat)$/;"	f
rotation3dToEulerAngles	.\matGeom\geom3d\rotation3dToEulerAngles.m	/^function varargout = rotation3dToEulerAngles(mat, varargin)$/;"	f
rotationOx	.\matGeom\deprecated\geom3d\rotationOx.m	/^function trans = rotationOx(varargin)$/;"	f
rotationOy	.\matGeom\deprecated\geom3d\rotationOy.m	/^function trans = rotationOy(varargin)$/;"	f
rotationOz	.\matGeom\deprecated\geom3d\rotationOz.m	/^function trans = rotationOz(varargin)$/;"	f
rowToPolygon	.\matGeom\polygons2d\rowToPolygon.m	/^function poly = rowToPolygon(row, varargin)$/;"	f
scale3d	.\matGeom\deprecated\geom3d\scale3d.m	/^function trans = scale3d(varargin)$/;"	f
scaling	.\matGeom\deprecated\geom2d\scaling.m	/^function trans = scaling(varargin)$/;"	f
scaling3d	.\matGeom\deprecated\geom3d\scaling3d.m	/^function trans = scaling3d(varargin)$/;"	f
setupMatGeom	.\matGeom\setupMatGeom.m	/^function setupMatGeom(varargin)$/;"	f
signatureToPolygon	.\matGeom\polygons2d\signatureToPolygon.m	/^function poly = signatureToPolygon(signature, varargin)$/;"	f
simplifyPolygon	.\matGeom\polygons2d\simplifyPolygon.m	/^function [poly, keepInds] = simplifyPolygon(poly, varargin)$/;"	f
simplifyPolyline	.\matGeom\polygons2d\simplifyPolyline.m	/^function [poly2, keepInds] = simplifyPolyline(poly, tol)$/;"	f
smoothMesh	.\matGeom\meshes3d\smoothMesh.m	/^function [v2, faces] = smoothMesh(vertices, faces, varargin)$/;"	f
smoothPolygon	.\matGeom\polygons2d\smoothPolygon.m	/^function res = smoothPolygon(poly, M)$/;"	f
smoothPolyline	.\matGeom\polygons2d\smoothPolyline.m	/^function res = smoothPolyline(poly, M)$/;"	f
sph2cart2	.\matGeom\geom3d\sph2cart2.m	/^function varargout = sph2cart2(theta, phi, rho)$/;"	f
sph2cart2d	.\matGeom\geom3d\sph2cart2d.m	/^function varargout = sph2cart2d(theta, phi, rho)$/;"	f
sphereMesh	.\matGeom\meshes3d\sphereMesh.m	/^function varargout = sphereMesh(sphere, varargin)$/;"	f
spheres	.\matGeom\geom3d\spheres.m	/^function spheres(varargin)$/;"	f
sphericalAngle	.\matGeom\geom3d\sphericalAngle.m	/^function alpha = sphericalAngle(p1, p2, p3)$/;"	f
sphericalVoronoiDomain	.\matGeom\geom3d\sphericalVoronoiDomain.m	/^function poly = sphericalVoronoiDomain(refPoint, neighbors)$/;"	f
splitMesh	.\matGeom\meshes3d\splitMesh.m	/^function meshes = splitMesh(vertices, faces, varargin)$/;"	f
splitPolygons	.\matGeom\polygons2d\splitPolygons.m	/^function polygons = splitPolygons(polygon)$/;"	f
splitPolygons3d	.\matGeom\geom3d\private\splitPolygons3d.m	/^function polygons = splitPolygons3d(polygon)$/;"	f
squareGrid	.\matGeom\geom2d\squareGrid.m	/^function varargout = squareGrid(bounds, origin, size)$/;"	f
steinerPoint	.\matGeom\polygons2d\steinerPoint.m	/^function pt = steinerPoint(varargin)$/;"	f
steinerPolygon	.\matGeom\polygons2d\steinerPolygon.m	/^function nodes = steinerPolygon(points)$/;"	f
steinerPolytope	.\matGeom\meshes3d\steinerPolytope.m	/^function [vertices, faces] = steinerPolytope(vectors)$/;"	f
subCurve	.\matGeom\deprecated\polygons2d\subCurve.m	/^function res = subCurve(curve, P1, P2, varargin)$/;"	f
subdivideMesh	.\matGeom\meshes3d\subdivideMesh.m	/^function [vertices2, faces2] = subdivideMesh(vertices, faces, n)$/;"	f
supportFunction	.\matGeom\polygons2d\supportFunction.m	/^function h = supportFunction(polygon, varargin)$/;"	f
surfToMesh	.\matGeom\meshes3d\surfToMesh.m	/^function varargout = surfToMesh(x, y, varargin)$/;"	f
surfaceCurvature	.\matGeom\geom3d\surfaceCurvature.m	/^function kappa = surfaceCurvature(kappa1, kappa2, theta)$/;"	f
test_p_poly_dist	.\test_p_poly_dist.m	/^function [hf, hp, d_min, x_d_min, y_d_min, is_vertex, idx_c, xc, yc, is_in_seg, Cer, Ppr] = test_p_poly_dist(xp, yp, xv, yv, varargin)$/;"	f
tetrahedronVolume	.\matGeom\meshes3d\tetrahedronVolume.m	/^function vol = tetrahedronVolume(vertices, varargin)$/;"	f
torusMesh	.\matGeom\meshes3d\torusMesh.m	/^function varargout = torusMesh(torus, varargin)$/;"	f
transformEdge	.\matGeom\geom2d\transformEdge.m	/^function dest = transformEdge(edge, trans)$/;"	f
transformLine	.\matGeom\geom2d\transformLine.m	/^function dest = transformLine(line, trans)$/;"	f
transformLine3d	.\matGeom\geom3d\transformLine3d.m	/^function res = transformLine3d(line, trans)$/;"	f
transformPlane3d	.\matGeom\geom3d\transformPlane3d.m	/^function plane2 = transformPlane3d(plane, trans)$/;"	f
transformPoint	.\matGeom\geom2d\transformPoint.m	/^function varargout = transformPoint(varargin)$/;"	f
transformPoint3d	.\matGeom\geom3d\transformPoint3d.m	/^function varargout = transformPoint3d(varargin)$/;"	f
transformVector	.\matGeom\geom2d\transformVector.m	/^function varargout = transformVector(varargin)$/;"	f
transformVector3d	.\matGeom\geom3d\transformVector3d.m	/^function varargout = transformVector3d(varargin)$/;"	f
transforms2d	.\matGeom\geom2d\transforms2d.m	/^function transforms2d(varargin)$/;"	f
transforms3d	.\matGeom\geom3d\transforms3d.m	/^function transforms3d(varargin)$/;"	f
translation	.\matGeom\deprecated\geom2d\translation.m	/^function trans = translation(varargin)$/;"	f
translation3d	.\matGeom\deprecated\geom3d\translation3d.m	/^function trans = translation3d(varargin)$/;"	f
triangleArea	.\matGeom\geom2d\triangleArea.m	/^function area = triangleArea(pt1, pt2, pt3)$/;"	f
triangleArea3d	.\matGeom\geom3d\triangleArea3d.m	/^function area = triangleArea3d(pt1, pt2, pt3)$/;"	f
triangleGrid	.\matGeom\geom2d\triangleGrid.m	/^function varargout = triangleGrid(bounds, origin, size, varargin)$/;"	f
triangulateCurvePair	.\matGeom\meshes3d\triangulateCurvePair.m	/^function [vertices, facets] = triangulateCurvePair(curve1, curve2)$/;"	f
triangulateFaces	.\matGeom\meshes3d\triangulateFaces.m	/^function [tri, inds] = triangulateFaces(faces)$/;"	f
triangulatePolygon	.\matGeom\polygons2d\triangulatePolygon.m	/^function tri = triangulatePolygon(poly)$/;"	f
triangulatePolygonPair	.\matGeom\meshes3d\triangulatePolygonPair.m	/^function [vertices, facets] = triangulatePolygonPair(poly1, poly2)$/;"	f
trimMesh	.\matGeom\meshes3d\trimMesh.m	/^function varargout = trimMesh(varargin)$/;"	f
trimeshEdgeFaces	.\matGeom\meshes3d\trimeshEdgeFaces.m	/^function edgeFaces = trimeshEdgeFaces(faces, varargin)$/;"	f
trimeshMeanBreadth	.\matGeom\meshes3d\trimeshMeanBreadth.m	/^function mb = trimeshMeanBreadth(vertices, faces)$/;"	f
trimeshSurfaceArea	.\matGeom\meshes3d\trimeshSurfaceArea.m	/^function area = trimeshSurfaceArea(v, e, f)$/;"	f
unbnd2bnd	.\lib\LevenbergMarquardt.m	/^function    X=unbnd2bnd(Y,lb,ub)$/;"	f
vecnorm3d	.\matGeom\deprecated\geom3d\vecnorm3d.m	/^function n = vecnorm3d(v)$/;"	f
vectorAngle	.\matGeom\geom2d\vectorAngle.m	/^function alpha = vectorAngle(v1, varargin)$/;"	f
vectorAngle3d	.\matGeom\geom3d\vectorAngle3d.m	/^function theta = vectorAngle3d(v1, v2)$/;"	f
vectorCross3d	.\matGeom\geom3d\vectorCross3d.m	/^function c = vectorCross3d(a,b)$/;"	f
vectorNorm	.\matGeom\geom2d\vectorNorm.m	/^function n = vectorNorm(v, varargin)$/;"	f
vectorNorm3d	.\matGeom\geom3d\vectorNorm3d.m	/^function n = vectorNorm3d(v)$/;"	f
vectorize	.\matGeom\deprecated\graphs\vectorize.m	/^function varargout = vectorize(img)$/;"	f
vectors2d	.\matGeom\geom2d\vectors2d.m	/^function vectors2d$/;"	f
vectors3d	.\matGeom\geom3d\vectors3d.m	/^function vectors3d(varargin)$/;"	f
vertexNormal	.\matGeom\meshes3d\vertexNormal.m	/^function normals = vertexNormal(vertices, faces)$/;"	f
voronoi2d	.\matGeom\graphs\voronoi2d.m	/^function [nodes, edges, faces] = voronoi2d(germs)$/;"	f
wgs2utm	.\wgs2utm.m	/^function  [x,y,utmzone,utmhemi] = wgs2utm(Lat,Lon,utmzone,utmhemi)$/;"	f
writeGraph	.\matGeom\graphs\writeGraph.m	/^function writeGraph(nodes, edges, fileName)$/;"	f
writeMesh_off	.\matGeom\meshes3d\writeMesh_off.m	/^function writeMesh_off(fileName, vertices, faces)$/;"	f
writeMesh_ply	.\matGeom\meshes3d\writeMesh_ply.m	/^function writeMesh_ply(fileName, vertices, faces)$/;"	f
writePolygonSet	.\matGeom\polygons2d\writePolygonSet.m	/^function writePolygonSet(polys, filename)$/;"	f
