!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
D	.\intersectPolylines.m	/^function u = D(x,y)$/;"	f
InterX	.\private\InterX.m	/^function P = InterX(L1,varargin)$/;"	f
cart2geod	.\cart2geod.m	/^function point = cart2geod(src, curve)$/;"	f
clipPolygon	.\clipPolygon.m	/^function poly2 = clipPolygon(polygon, w)$/;"	f
clipPolygonHP	.\clipPolygonHP.m	/^function poly2 = clipPolygonHP(poly, line)$/;"	f
contourMatrixToPolylines	.\contourMatrixToPolylines.m	/^function polys = contourMatrixToPolylines(C)$/;"	f
convexHull	.\convexHull.m	/^function [hull, inds] = convexHull(points, varargin)$/;"	f
convexification	.\convexification.m	/^function co = convexification(varargin)$/;"	f
curvature	.\curvature.m	/^function kappa = curvature(varargin)$/;"	f
curveCMoment	.\curveCMoment.m	/^function m = curveCMoment(curve, p, q)$/;"	f
curveCSMoment	.\curveCSMoment.m	/^function m = curveCSMoment(curve, p, q)$/;"	f
curveMoment	.\curveMoment.m	/^function m = curveMoment(curve, p, q)$/;"	f
densifyPolygon	.\densifyPolygon.m	/^function poly2 = densifyPolygon(poly, N)$/;"	f
distancePointPolygon	.\distancePointPolygon.m	/^function minDist = distancePointPolygon(point, poly)$/;"	f
distancePointPolyline	.\distancePointPolyline.m	/^function [minDist, pos] = distancePointPolyline(point, poly, varargin)$/;"	f
distancePolygons	.\distancePolygons.m	/^function dist = distancePolygons(poly1, poly2)$/;"	f
distancePolygonsNoCross	.\distancePolygonsNoCross.m	/^function dist = distancePolygonsNoCross(poly1, poly2)$/;"	f
distancePolylines	.\distancePolylines.m	/^function dist = distancePolylines(poly1, poly2)$/;"	f
drawPolygon	.\drawPolygon.m	/^function varargout = drawPolygon (px, varargin)$/;"	f
drawPolyline	.\drawPolyline.m	/^function varargout = drawPolyline(varargin)$/;"	f
drawVertices	.\drawVertices.m	/^function varargout = drawVertices(varargin)$/;"	f
expandPolygon	.\expandPolygon.m	/^function loops = expandPolygon(poly, dist, varargin)$/;"	f
fillPolygon	.\fillPolygon.m	/^function varargout = fillPolygon(varargin)$/;"	f
findPoint	.\findPoint.m	/^function index = findPoint(coord, points, varargin)$/;"	f
geod2cart	.\geod2cart.m	/^function point = geod2cart(src, curve, normal)$/;"	f
intersectEdgePolygon	.\intersectEdgePolygon.m	/^function [intersects, inds] = intersectEdgePolygon(edge, poly, varargin)$/;"	f
intersectLinePolygon	.\intersectLinePolygon.m	/^function [intersects, edgeIndices] = intersectLinePolygon(line, poly, varargin)$/;"	f
intersectLinePolyline	.\intersectLinePolyline.m	/^function [intersects, edgeIndices] = intersectLinePolyline(line, poly, varargin)$/;"	f
intersectPolylines	.\intersectPolylines.m	/^function pts = intersectPolylines(poly1, varargin)$/;"	f
intersectRayPolygon	.\intersectRayPolygon.m	/^function [intersects, edgeIndices] = intersectRayPolygon(ray, poly, varargin)$/;"	f
isPointInPolygon	.\isPointInPolygon.m	/^function b = isPointInPolygon(point, poly)$/;"	f
isPointOnPolyline	.\isPointOnPolyline.m	/^function res = isPointOnPolyline(point, poly, varargin)$/;"	f
medialAxisConvex	.\medialAxisConvex.m	/^function [nodes, edges] = medialAxisConvex(points)$/;"	f
minimumCaliperDiameter	.\minimumCaliperDiameter.m	/^function [min_width, min_angle] = minimumCaliperDiameter(points)$/;"	f
parametrize	.\parametrize.m	/^function par = parametrize(varargin)$/;"	f
pointSetsAverage	.\pointSetsAverage.m	/^function average = pointSetsAverage(pointSets, varargin)$/;"	f
polygonArea	.\polygonArea.m	/^function area = polygonArea(poly, varargin)$/;"	f
polygonBounds	.\polygonBounds.m	/^function box = polygonBounds(polygon)$/;"	f
polygonCentroid	.\polygonCentroid.m	/^function [centroid, area] = polygonCentroid(varargin)$/;"	f
polygonContains	.\polygonContains.m	/^function varargout = polygonContains(poly, point)$/;"	f
polygonCurvature	.\polygonCurvature.m	/^function curv = polygonCurvature(poly, M)$/;"	f
polygonEdges	.\polygonEdges.m	/^function edges = polygonEdges(poly)$/;"	f
polygonInertiaEllipse	.\polygonInertiaEllipse.m	/^function elli = polygonInertiaEllipse(poly)$/;"	f
polygonLength	.\polygonLength.m	/^function len = polygonLength(poly, varargin)$/;"	f
polygonLoops	.\polygonLoops.m	/^function loops = polygonLoops(poly, varargin)$/;"	f
polygonNormalAngle	.\polygonNormalAngle.m	/^function theta = polygonNormalAngle(points, ind)$/;"	f
polygonOuterNormal	.\polygonOuterNormal.m	/^function vect = polygonOuterNormal(poly, iVertex)$/;"	f
polygonPoint	.\polygonPoint.m	/^function point = polygonPoint(poly, pos)$/;"	f
polygonSecondAreaMoments	.\polygonSecondAreaMoments.m	/^function [Ixx, Iyy, Ixy] = polygonSecondAreaMoments(poly)$/;"	f
polygonSelfIntersections	.\polygonSelfIntersections.m	/^function varargout = polygonSelfIntersections(poly, varargin)$/;"	f
polygonSignature	.\polygonSignature.m	/^function [res, thetaList] = polygonSignature(poly, varargin)$/;"	f
polygonSubcurve	.\polygonSubcurve.m	/^function res = polygonSubcurve(poly, t0, t1)$/;"	f
polygonSymmetryAxis	.\polygonSymmetryAxis.m	/^function axis = polygonSymmetryAxis(poly)$/;"	f
polygonToRow	.\polygonToRow.m	/^function row = polygonToRow(polygon, varargin)$/;"	f
polygonVertices	.\polygonVertices.m	/^function vertices = polygonVertices(poly)$/;"	f
polylineCentroid	.\polylineCentroid.m	/^function center = polylineCentroid(varargin)$/;"	f
polylineLength	.\polylineLength.m	/^function len = polylineLength(poly, varargin)$/;"	f
polylinePoint	.\polylinePoint.m	/^function point = polylinePoint(poly, pos)$/;"	f
polylineSelfIntersections	.\polylineSelfIntersections.m	/^function varargout = polylineSelfIntersections(poly, varargin)$/;"	f
polylineSubcurve	.\polylineSubcurve.m	/^function res = polylineSubcurve(poly, t0, t1)$/;"	f
projPointOnPolygon	.\projPointOnPolygon.m	/^function varargout = projPointOnPolygon(point, poly, varargin)$/;"	f
projPointOnPolyline	.\projPointOnPolyline.m	/^function varargout = projPointOnPolyline(point, poly, varargin)$/;"	f
randomPointInPolygon	.\randomPointInPolygon.m	/^function points = randomPointInPolygon(poly, varargin)$/;"	f
readPolygonSet	.\readPolygonSet.m	/^function polys = readPolygonSet(filename)$/;"	f
removeMultipleVertices	.\removeMultipleVertices.m	/^function poly = removeMultipleVertices(poly, varargin)$/;"	f
resamplePolygon	.\resamplePolygon.m	/^function poly2 = resamplePolygon(poly, n)$/;"	f
resamplePolygonByLength	.\resamplePolygonByLength.m	/^function poly2 = resamplePolygonByLength(poly, step)$/;"	f
resamplePolyline	.\resamplePolyline.m	/^function poly2 = resamplePolyline(poly, n)$/;"	f
resamplePolylineByLength	.\resamplePolylineByLength.m	/^function poly2 = resamplePolylineByLength(poly, step)$/;"	f
reversePolygon	.\reversePolygon.m	/^function rev = reversePolygon(poly)$/;"	f
reversePolyline	.\reversePolyline.m	/^function rev = reversePolyline(poly)$/;"	f
rowToPolygon	.\rowToPolygon.m	/^function poly = rowToPolygon(row, varargin)$/;"	f
signatureToPolygon	.\signatureToPolygon.m	/^function poly = signatureToPolygon(signature, varargin)$/;"	f
simplifyPolygon	.\simplifyPolygon.m	/^function [poly, keepInds] = simplifyPolygon(poly, varargin)$/;"	f
simplifyPolyline	.\simplifyPolyline.m	/^function [poly2, keepInds] = simplifyPolyline(poly, tol)$/;"	f
smoothPolygon	.\smoothPolygon.m	/^function res = smoothPolygon(poly, M)$/;"	f
smoothPolyline	.\smoothPolyline.m	/^function res = smoothPolyline(poly, M)$/;"	f
splitPolygons	.\splitPolygons.m	/^function polygons = splitPolygons(polygon)$/;"	f
steinerPoint	.\steinerPoint.m	/^function pt = steinerPoint(varargin)$/;"	f
steinerPolygon	.\steinerPolygon.m	/^function nodes = steinerPolygon(points)$/;"	f
supportFunction	.\supportFunction.m	/^function h = supportFunction(polygon, varargin)$/;"	f
triangulatePolygon	.\triangulatePolygon.m	/^function tri = triangulatePolygon(poly)$/;"	f
writePolygonSet	.\writePolygonSet.m	/^function writePolygonSet(polys, filename)$/;"	f
